""" Solution to day 1 parts 1 and 2. """

DATA = (
    '4947511368953458947325823626295765395991842961953181626646951893933643725857'
    '7886851219486392765278814977974865798931864593622188773154271856264327268386'
    '2627537378624843614831337441659741281289638765171452576466381314558821636595'
    '3949817885886734437693435978518839556688181657231749398938416549145566813241'
    '3366744641213851172442429239445416662363987242516864433624821721382633974126'
    '7546823779383343362789527461579565822966859349777937921933694912369552152772'
    '7351678327625637196643154569871867135411537814996461782387626441864843811422'
    '4992619474371313926259626487845863659589648736265867222434624135866723411597'
    '4528626523648311919886566497837217169673923935143386823757293148719377821517'
    '3146298128869124128299244845134938856723439641512524336223411416615238144659'
    '9151696168451194147157289545371162498626934239878617584692578391868685644268'
    '4489873327497698963658862856336682422797551251489126661954848572297228765445'
    '6467452564996794514263588654778444674585339629818522925133588714833211619735'
    '8324569876353159839546767552918149691111776983412751644136926127524422597889'
    '3617456524385518493112272169767775861256649728253754964675812534546226295535'
    '9396973521412173373467385534956168327837578669281745191453572348345847882538'
    '9361854948438573328362719944536965833917564448485938588457494321926792272996'
    '7571943843794565736975716174727852348441254492886794362934343868643337828637'
    '4542775822769623532463578354933383722198243715175264742835417148979941278644'
    '6143362789483126865933626423443687271537472721176416773916934199957385562777'
    '5114848275268739159272518673316753672995297888734844388928439859359992475637'
    '4397712692329165423858767796166951294123667351125936697193357835113557738146'
    '8549187672145299471431886371654247318724635154862615777514333316142286792443'
    '7526253865859969947366972895674966845993244925218766937543487875485647329995'
    '2858217393593699989353319861268737267376721592658275664437945157559398136761'
    '9475547447722415213998794441946337138649984141522773467373355526154387135979'
    '7796529847861748979527579985757964742667473767269248335229836818297477665453'
    '189662485548925521497365877771665365728224394427883312135322325169141784'
)

def load(day):
    """Open specified days input file."""
    filename = 'input_{}.txt'.format(str(day).zfill(2))
    return open(filename).read()

assert load(1) == DATA

def sum_that_match_next(sequence):
    """Return the sum of numbers that match the next digit."""
    total = 0
    for idx, val in enumerate(sequence):
        if int(val) == int(sequence[(idx + 1) % len(sequence)]):
            total += int(val)
    return total

# Part 1 test cases
assert(sum_that_match_next('1122')) == 3
assert(sum_that_match_next('1111')) == 4
assert(sum_that_match_next('1234')) == 0
assert(sum_that_match_next('91212129')) == 9

# Part 1 solution
print("Solution to part 1: {}".format(sum_that_match_next(load(1))))

def sum_that_match_n_ahead(sequence, n_ahead=0):
    """Return the sum of numbers that match the digit n_ahead numbers ahead."""
    if n_ahead == 0:
        n_ahead = int(len(sequence) / 2)

    total = 0
    for idx, val in enumerate(sequence):
        n_ahead_val = (idx + n_ahead) % len(sequence)
        # print(f"{idx}, {n_ahead_val}")
        if int(val) == int(sequence[n_ahead_val]):
            total += int(val)
    return total

# Part 2 test cases
assert(sum_that_match_n_ahead('1212')) == 6
assert(sum_that_match_n_ahead('1221')) == 0
assert(sum_that_match_n_ahead('123425')) == 4
assert(sum_that_match_n_ahead('123123')) == 12
assert(sum_that_match_n_ahead('12131415')) == 4

# Part 2 solution
print("Solution to part 2: {}".format(sum_that_match_n_ahead(load(1))))
